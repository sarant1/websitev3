/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/eve";
exports.ids = ["vendor-chunks/eve"];
exports.modules = {

/***/ "(ssr)/./node_modules/eve/eve.js":
/*!*********************************!*\
  !*** ./node_modules/eve/eve.js ***!
  \*********************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.5.4 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n(function(glob) {\n    var version = \"0.5.4\", has = \"hasOwnProperty\", separator = /[\\.\\/]/, comaseparator = /\\s*,\\s*/, wildcard = \"*\", numsort = function(a, b) {\n        return a - b;\n    }, current_event, stop, events = {\n        n: {}\n    }, firstDefined = function() {\n        for(var i = 0, ii = this.length; i < ii; i++){\n            if (typeof this[i] != \"undefined\") {\n                return this[i];\n            }\n        }\n    }, lastDefined = function() {\n        var i = this.length;\n        while(--i){\n            if (typeof this[i] != \"undefined\") {\n                return this[i];\n            }\n        }\n    }, objtos = Object.prototype.toString, Str = String, isArray = Array.isArray || function(ar) {\n        return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n    }, /*\\\n     * eve\n     [ method ]\n\n     * Fires event with given `name`, given scope and other parameters.\n\n     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n     - scope (object) context for the event handlers\n     - varargs (...) the rest of arguments will be sent to event handlers\n\n     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n    \\*/ eve = function(name, scope) {\n        var oldstop = stop, args = Array.prototype.slice.call(arguments, 2), listeners = eve.listeners(name), z = 0, l, indexed = [], queue = {}, out = [], ce = current_event;\n        out.firstDefined = firstDefined;\n        out.lastDefined = lastDefined;\n        current_event = name;\n        stop = 0;\n        for(var i = 0, ii = listeners.length; i < ii; i++)if (\"zIndex\" in listeners[i]) {\n            indexed.push(listeners[i].zIndex);\n            if (listeners[i].zIndex < 0) {\n                queue[listeners[i].zIndex] = listeners[i];\n            }\n        }\n        indexed.sort(numsort);\n        while(indexed[z] < 0){\n            l = queue[indexed[z++]];\n            out.push(l.apply(scope, args));\n            if (stop) {\n                stop = oldstop;\n                return out;\n            }\n        }\n        for(i = 0; i < ii; i++){\n            l = listeners[i];\n            if (\"zIndex\" in l) {\n                if (l.zIndex == indexed[z]) {\n                    out.push(l.apply(scope, args));\n                    if (stop) {\n                        break;\n                    }\n                    do {\n                        z++;\n                        l = queue[indexed[z]];\n                        l && out.push(l.apply(scope, args));\n                        if (stop) {\n                            break;\n                        }\n                    }while (l);\n                } else {\n                    queue[l.zIndex] = l;\n                }\n            } else {\n                out.push(l.apply(scope, args));\n                if (stop) {\n                    break;\n                }\n            }\n        }\n        stop = oldstop;\n        current_event = ce;\n        return out;\n    };\n    // Undocumented. Debug only.\n    eve._events = events;\n    /*\\\n     * eve.listeners\n     [ method ]\n\n     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n     = (array) array of event handlers\n    \\*/ eve.listeners = function(name) {\n        var names = isArray(name) ? name : name.split(separator), e = events, item, items, k, i, ii, j, jj, nes, es = [\n            e\n        ], out = [];\n        for(i = 0, ii = names.length; i < ii; i++){\n            nes = [];\n            for(j = 0, jj = es.length; j < jj; j++){\n                e = es[j].n;\n                items = [\n                    e[names[i]],\n                    e[wildcard]\n                ];\n                k = 2;\n                while(k--){\n                    item = items[k];\n                    if (item) {\n                        nes.push(item);\n                        out = out.concat(item.f || []);\n                    }\n                }\n            }\n            es = nes;\n        }\n        return out;\n    };\n    /*\\\n     * eve.separator\n     [ method ]\n\n     * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n     * here. Be aware that if you pass a string longer than one character it will be treated as\n     * a list of characters.\n\n     - separator (string) new separator. Empty string resets to default: `.` or `/`.\n    \\*/ eve.separator = function(sep) {\n        if (sep) {\n            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n            sep = \"[\" + sep + \"]\";\n            separator = new RegExp(sep);\n        } else {\n            separator = /[\\.\\/]/;\n        }\n    };\n    /*\\\n     * eve.on\n     [ method ]\n     **\n     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n     | eve.on(\"*.under.*\", f);\n     | eve(\"mouse.under.floor\"); // triggers f\n     * Use @eve to trigger the listener.\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     - name (array) if you don’t want to use separators, you can use array of strings\n     - f (function) event handler function\n     **\n     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment.\n     > Example:\n     | eve.on(\"mouse\", eatIt)(2);\n     | eve.on(\"mouse\", scream);\n     | eve.on(\"mouse\", catchIt)(1);\n     * This will ensure that `catchIt` function will be called before `eatIt`.\n     *\n     * If you want to put your handler before non-indexed handlers, specify a negative value.\n     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n    \\*/ eve.on = function(name, f) {\n        if (typeof f != \"function\") {\n            return function() {};\n        }\n        var names = isArray(name) ? isArray(name[0]) ? name : [\n            name\n        ] : Str(name).split(comaseparator);\n        for(var i = 0, ii = names.length; i < ii; i++){\n            (function(name) {\n                var names = isArray(name) ? name : Str(name).split(separator), e = events, exist;\n                for(var i = 0, ii = names.length; i < ii; i++){\n                    e = e.n;\n                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {\n                        n: {}\n                    });\n                }\n                e.f = e.f || [];\n                for(i = 0, ii = e.f.length; i < ii; i++)if (e.f[i] == f) {\n                    exist = true;\n                    break;\n                }\n                !exist && e.f.push(f);\n            })(names[i]);\n        }\n        return function(zIndex) {\n            if (+zIndex == +zIndex) {\n                f.zIndex = +zIndex;\n            }\n        };\n    };\n    /*\\\n     * eve.f\n     [ method ]\n     **\n     * Returns function that will fire given event with optional arguments.\n     * Arguments that will be passed to the result function will be also\n     * concated to the list of final arguments.\n     | el.onclick = eve.f(\"click\", 1, 2);\n     | eve.on(\"click\", function (a, b, c) {\n     |     console.log(a, b, c); // 1, 2, [event object]\n     | });\n     - event (string) event name\n     - varargs (…) and any other arguments\n     = (function) possible event handler function\n    \\*/ eve.f = function(event) {\n        var attrs = [].slice.call(arguments, 1);\n        return function() {\n            eve.apply(null, [\n                event,\n                null\n            ].concat(attrs).concat([].slice.call(arguments, 0)));\n        };\n    };\n    /*\\\n     * eve.stop\n     [ method ]\n     **\n     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n    \\*/ eve.stop = function() {\n        stop = 1;\n    };\n    /*\\\n     * eve.nt\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     - subname (string) #optional subname of the event\n     **\n     = (string) name of the event, if `subname` is not specified\n     * or\n     = (boolean) `true`, if current event’s name contains `subname`\n    \\*/ eve.nt = function(subname) {\n        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n        if (subname) {\n            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n        }\n        return cur;\n    };\n    /*\\\n     * eve.nts\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     **\n     = (array) names of the event\n    \\*/ eve.nts = function() {\n        return isArray(current_event) ? current_event : current_event.split(separator);\n    };\n    /*\\\n     * eve.off\n     [ method ]\n     **\n     * Removes given function from the list of event listeners assigned to given name.\n     * If no arguments specified all the events will be cleared.\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n    \\*/ /*\\\n     * eve.unbind\n     [ method ]\n     **\n     * See @eve.off\n    \\*/ eve.off = eve.unbind = function(name, f) {\n        if (!name) {\n            eve._events = events = {\n                n: {}\n            };\n            return;\n        }\n        var names = isArray(name) ? isArray(name[0]) ? name : [\n            name\n        ] : Str(name).split(comaseparator);\n        if (names.length > 1) {\n            for(var i = 0, ii = names.length; i < ii; i++){\n                eve.off(names[i], f);\n            }\n            return;\n        }\n        names = isArray(name) ? name : Str(name).split(separator);\n        var e, key, splice, i, ii, j, jj, cur = [\n            events\n        ], inodes = [];\n        for(i = 0, ii = names.length; i < ii; i++){\n            for(j = 0; j < cur.length; j += splice.length - 2){\n                splice = [\n                    j,\n                    1\n                ];\n                e = cur[j].n;\n                if (names[i] != wildcard) {\n                    if (e[names[i]]) {\n                        splice.push(e[names[i]]);\n                        inodes.unshift({\n                            n: e,\n                            name: names[i]\n                        });\n                    }\n                } else {\n                    for(key in e)if (e[has](key)) {\n                        splice.push(e[key]);\n                        inodes.unshift({\n                            n: e,\n                            name: key\n                        });\n                    }\n                }\n                cur.splice.apply(cur, splice);\n            }\n        }\n        for(i = 0, ii = cur.length; i < ii; i++){\n            e = cur[i];\n            while(e.n){\n                if (f) {\n                    if (e.f) {\n                        for(j = 0, jj = e.f.length; j < jj; j++)if (e.f[j] == f) {\n                            e.f.splice(j, 1);\n                            break;\n                        }\n                        !e.f.length && delete e.f;\n                    }\n                    for(key in e.n)if (e.n[has](key) && e.n[key].f) {\n                        var funcs = e.n[key].f;\n                        for(j = 0, jj = funcs.length; j < jj; j++)if (funcs[j] == f) {\n                            funcs.splice(j, 1);\n                            break;\n                        }\n                        !funcs.length && delete e.n[key].f;\n                    }\n                } else {\n                    delete e.f;\n                    for(key in e.n)if (e.n[has](key) && e.n[key].f) {\n                        delete e.n[key].f;\n                    }\n                }\n                e = e.n;\n            }\n        }\n        // prune inner nodes in path\n        prune: for(i = 0, ii = inodes.length; i < ii; i++){\n            e = inodes[i];\n            for(key in e.n[e.name].f){\n                continue prune;\n            }\n            for(key in e.n[e.name].n){\n                continue prune;\n            }\n            // is empty\n            delete e.n[e.name];\n        }\n    };\n    /*\\\n     * eve.once\n     [ method ]\n     **\n     * Binds given event handler with a given name to only run once then unbind itself.\n     | eve.once(\"login\", f);\n     | eve(\"login\"); // triggers f\n     | eve(\"login\"); // no listeners\n     * Use @eve to trigger the listener.\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) same return function as @eve.on\n    \\*/ eve.once = function(name, f) {\n        var f2 = function() {\n            eve.off(name, f2);\n            return f.apply(this, arguments);\n        };\n        return eve.on(name, f2);\n    };\n    /*\\\n     * eve.version\n     [ property (string) ]\n     **\n     * Current version of the library.\n    \\*/ eve.version = version;\n    eve.toString = function() {\n        return \"You are running Eve \" + version;\n    };\n    glob.eve = eve;\n     true && module.exports ? module.exports = eve :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n        return eve;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n})( false ? 0 : this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eve/eve.js\n");

/***/ })

};
;